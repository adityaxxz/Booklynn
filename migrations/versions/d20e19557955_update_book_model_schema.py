"""update_book_model_schema

Revision ID: d20e19557955
Revises: 
Create Date: 2025-09-26 22:18:56.466170

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd20e19557955'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create user_accounts table (this is new and should work fine)
    op.create_table('user_accounts',
    sa.Column('uid', sa.String(length=36), nullable=False),  # Use String for SQLite compatibility
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),  # Use DateTime for SQLite compatibility
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('uid')
    )
    
    # For SQLite, we need to recreate the books table with correct schema
    # Step 1: Create new table with correct schema
    op.create_table('books_new',
        sa.Column('uid', sa.String(length=36), nullable=False),
        sa.Column('title', sa.String(), nullable=False),
        sa.Column('author', sa.String(), nullable=False),
        sa.Column('year', sa.String(), nullable=False),
        sa.Column('language', sa.Enum('English', 'Other', name='languageenum'), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('uid'),
        sa.UniqueConstraint('uid')
    )
    
    # Step 2: Copy data from old table to new table
    op.execute("""
        INSERT INTO books_new (uid, title, author, year, language, created_at, updated_at)
        SELECT uid, title, author, year, language, created_at, updated_at
        FROM books
    """)
    
    # Step 3: Drop old table
    op.drop_table('books')
    
    # Step 4: Rename new table to original name
    op.rename_table('books_new', 'books')
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Recreate old books table schema
    op.create_table('books_old',
        sa.Column('uid', sa.NUMERIC(), nullable=False),  # Original type
        sa.Column('title', sa.String(), nullable=False),
        sa.Column('author', sa.String(), nullable=False),
        sa.Column('year', sa.String(), nullable=False),
        sa.Column('language', sa.String(length=7), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(), nullable=True),  # Original type
        sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),  # Original type
        sa.PrimaryKeyConstraint('uid'),
        sa.UniqueConstraint('uid')
    )
    
    # Copy data back
    op.execute("""
        INSERT INTO books_old (uid, title, author, year, language, created_at, updated_at)
        SELECT uid, title, author, year, language, created_at, updated_at
        FROM books
    """)
    
    # Drop new table and rename old table
    op.drop_table('books')
    op.rename_table('books_old', 'books')
    
    # Drop user_accounts table
    op.drop_table('user_accounts')
    # ### end Alembic commands ###
